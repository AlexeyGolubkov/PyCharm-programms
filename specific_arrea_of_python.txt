Вот
несколько
наиболее
часто
используемых
структур
данных:

### 1. Список (list)
Это
упорядоченная
коллекция
элементов, которая
может
содержать
элементы
разных
типов.Элементы
списка
могут
изменяться
после
их
добавления.

my_list = [1, 'hello', True]

### 2. Кортеж (tuple)
Кортеж
похож
на
список, но
является
неизменяемым.То
есть, после
создания
кортежа
нельзя
добавлять, удалять
или
изменять
его
элементы.

my_tuple = (1, 'world', False)

### 3. Словарь (dict)
Словари
хранят
пары
ключ - значение.Ключи
должны
быть
уникальными
и
хешируемыми
объектами(например, строки, числа, кортежи).Значения
могут
быть
любыми
объектами.

my_dict = {'name': 'John', 'age': 30}

### 4. Множество (set)
Множества
содержат
уникальные
элементы
и
не
поддерживают
порядок
следования
элементов.Они
полезны
для
быстрого
поиска
элементов
и
операций
над
множествами(объединение, пересечение
и
т.п.).

my_set = {1, 2, 3}

### 5. Дек (deque) (из модуля collections)
Дек — это
двухсторонняя
очередь, которая
позволяет
эффективно
добавлять
и
удалять
элементы
с
обоих
концов
коллекции.

from collections import deque

my_deque = deque([1, 2, 3])
my_deque.appendleft(0)  # Добавление элемента слева
my_deque.append(4)  # Добавление элемента справа
print(my_deque)  # Выведет: deque([0, 1, 2, 3, 4])

### 6. Очередь (Queue) (из модуля queue)
Очереди
реализуют
принцип
FIFO(First
In
First
Out).Они
используются
для
обработки
задач
в
порядке
поступления.

from queue import Queue

q = Queue()
q.put('task1')
q.put('task2')
print(q.get())  # Выведет: task1

### 7. Стек (LifoQueue) (из модуля queue)
Стеки
реализуют
принцип
LIFO(Last
In
First
Out).

from queue import LifoQueue

s = LifoQueue()
s.put('task1')
s.put('task2')
print(s.get())  # Выведет: task2

### 8. Отображение (defaultdict) (из модуля collections)
Отображения
позволяют
задавать
значения
по
умолчанию
для
ключей, которые
отсутствуют
в
словаре.

from collections import defaultdict

dd = defaultdict(int)
dd['key'] += 1
print(dd['key'])  # Выведет: 1
